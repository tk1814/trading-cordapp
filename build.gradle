buildscript { //properties that you need to build the project
    Properties constants = new Properties()
    file("$projectDir/constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()

        //token dependency
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.2'

        // springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'

        accounts_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"
    }

    repositories {

        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url 'http://software.r3.com/artifactory/corda-lib' }
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        maven { url 'https://software.r3.com/artifactory/corda' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"

        classpath "com.sendgrid:sendgrid-java:4.7.0"
        classpath "com.sendgrid:java-http-client:4.3.6"

        classpath fileTree (dir:'lib', include:['*.jar'])
    }
}


allprojects {//Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'java'

    repositories {


        mavenLocal()

        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://software.r3.com/artifactory/corda-lib' }
        maven { url "https://software.r3.com/artifactory/corda" }

        // Corda dependencies for the patched Quasar version
        maven { url "https://software.r3.com/artifactory/corda-dependencies" }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

//    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
//        kotlinOptions {
//            languageVersion = "1.2"
//            apiVersion = "1.2"
//            jvmTarget = "1.8"
//            javaParameters = true   // Useful for reflection.
//        }
//    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaCompile ("$corda_release_group:corda-node:$corda_release_version")
//            {
//        exclude group: 'com.github.bft-smart', module: 'library'
//    }// added

    configurations.all {
        exclude group: "com.github.bft-smart", module: 'library'
    }



    compile fileTree (dir:'lib', include:['*.jar'])


    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaDriver "net.corda:corda-shell:4.9"
    cordaCompile "$corda_release_group:corda-finance-contracts:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance-workflows:$corda_release_version"


    // Any sampler needs to depend on Corda RPC to invoke flows - the RPC client is used to actually drive the node



    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-money:1.1"
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp("$corda_release_group:corda-finance-contracts:$corda_release_version")
    cordapp("$corda_release_group:corda-finance-workflows:$corda_release_version")



}

//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */

    //Java version check
    if (JavaVersion.current() != JavaVersion.VERSION_1_8){
        throw new IllegalArgumentException("GradleException: This build must be run with java 8") //GradleException("This build must be run with java 8")
    }

    def clusterAddresses = ["127.0.0.1:11000", "127.0.0.1:11010", "127.0.0.1:11020", "127.0.0.1:11030"]
    nodeDefaults {
        projectCordapp { deploy = true }
        cordapp "$tokens_release_group:tokens-money:1.1"
        cordapp("$corda_release_group:corda-finance-contracts:$corda_release_version")
        cordapp("$corda_release_group:corda-finance-workflows:$corda_release_version")
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp project(':contracts')
        cordapp project(':workflows')

    }

    node {
        name "O=Notary Service 0,L=Zurich,C=CH"
        p2pAddress "127.0.0.1:10009"
        //p2pPort 10009
        rpcSettings {
            address "0.0.0.0:10010"
            adminAddress "0.0.0.0:10110"
        }
        notary = [
                validating: false,
                serviceLegalName: "O=BFT,L=Zurich,C=CH",
                bftSMaRt: [
                        replicaId: 0,
                        clusterAddresses: clusterAddresses
                ]
        ]
    }
    node {
        name "O=Notary Service 1,L=Zurich,C=CH"

        p2pAddress "127.0.0.1:10013"
        //p2pPort 10013
        rpcSettings {
            address "0.0.0.0:10014"
            adminAddress "0.0.0.0:10114"
        }
        notary = [
                validating: false,
                serviceLegalName: "O=BFT,L=Zurich,C=CH",
                bftSMaRt: [
                        replicaId: 1,
                        clusterAddresses: clusterAddresses
                ]
        ]
    }
    node {
        name "O=Notary Service 2,L=Zurich,C=CH"
        p2pAddress "127.0.0.1:10017"
        //p2pPort 10017
        rpcSettings {
            address "0.0.0.0:10018"
            adminAddress "0.0.0.0:10118"
        }
        notary = [
                validating: false,
                serviceLegalName: "O=BFT,L=Zurich,C=CH",
                bftSMaRt: [
                        replicaId: 2,
                        clusterAddresses: clusterAddresses
                ]
        ]
    }
    node {
        name "O=Notary Service 3,L=Zurich,C=CH"
        p2pAddress "127.0.0.1:10021"
        //p2pPort 10021
        rpcSettings {
            address "0.0.0.0:10022"
            adminAddress "0.0.0.0:10122"
        }
        notary = [
                validating: false,
                serviceLegalName: "O=BFT,L=Zurich,C=CH",
                bftSMaRt: [
                        replicaId: 3,
                        clusterAddresses: clusterAddresses
                ]
        ]
    }


    node {
        name "O=PartyA,L=London,C=GB"
        p2pAddress "127.0.0.1:10006"
        //p2pPort 10006
        rpcSettings {
            address("0.0.0.0:10016")
            adminAddress("0.0.0.0:10046")
        }
        runSchemaMigration = true

        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=PartyB,L=New York,C=US"
        p2pAddress "127.0.0.1:10007"
        //p2pPort 10007
        rpcSettings {
            address("0.0.0.0:10025")
            adminAddress("0.0.0.0:10225")
        }
        runSchemaMigration = true

        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

}