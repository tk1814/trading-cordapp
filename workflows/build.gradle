apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "CordApp Trading Flows"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 1
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            java.outputDir = file('bin/main')
        }
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        java {
            srcDir 'src/test/java'
            java.outputDir = file('bin/main')
        }
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


dependencies {


    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-finance-workflows:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"



    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    //compile 'com.github.bft-smart:library:master-v1.1-beta-g6215ec8-87' // added
    cordaCompile ("$corda_release_group:corda-node:$corda_release_version") {
        exclude group: 'com.github', module: 'bft-smart'
    }// added



    compile fileTree (dir:'../lib', include:'BFT-SMaRt.jar')
    compile fileTree (dir:'../lib', include:'jmeter-corda-4.9.1.jar')
    // SendGrid
    implementation 'com.sendgrid:sendgrid-java:4.7.0'
    //compile 'com.sendgrid:sendgrid-java:4.7.0'

    // CorDapp dependencies.
//    compile project(":contracts")
//
//    //Token SDK dependencies.
//    compile "$tokens_release_group:tokens-workflows:$tokens_release_version"
//    compile "$tokens_release_group:tokens-contracts:$tokens_release_version"
//    compile "$tokens_release_group:tokens-money:1.1"
    cordaCompile "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-money:1.1"
    cordapp project(":contracts")

    ext.jmeterVersion = 3.3
    // Dependency on Apache JMeter
    compile group: 'org.apache.jmeter', name: 'ApacheJMeter_java', version: jmeterVersion // 'compile' because we extend Java sampler.


    configurations.all {
        exclude group: "com.github.bft-smart", module: 'library'
    }

    // OkHTTP: A simple HTTP library.
    compile "com.squareup.okhttp3:okhttp:3.5.0"

}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task deploySampler {
    samplerDeployPath = project.ext.getProperty('samplerDeployPath')
    doLast {
        project.sync {
            from "build/libs"
            into "/Users/lanlan/Corda-Test-Suite/extlibs/"
            include "*.jar"
        }
        println "$samplerDeployPath is synced up wit sampler and dependency JAR files."
    }
}